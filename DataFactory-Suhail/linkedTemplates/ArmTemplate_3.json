{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactory-Suhail"
		},
		"triggerBlob_properties_Combo_ABC_parameters_A": {
			"type": "int",
			"defaultValue": 10
		},
		"triggerBlob_properties_Combo_ABC_parameters_B": {
			"type": "int",
			"defaultValue": 5
		},
		"triggerBlob_properties_Combo_ABC_parameters_C": {
			"type": "int",
			"defaultValue": 5
		},
		"triggerBlob_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/bd3237af-20eb-4b14-8b52-648cc623e0dd/resourceGroups/AzureTraining/providers/Microsoft.Storage/storageAccounts/storageaccsuhail"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OrderStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Order2023",
								"type": "DatasetReference"
							},
							"name": "Order2023"
						},
						{
							"dataset": {
								"referenceName": "Order2024",
								"type": "DatasetReference"
							},
							"name": "Order2024"
						},
						{
							"dataset": {
								"referenceName": "Order2025",
								"type": "DatasetReference"
							},
							"name": "Order2025"
						},
						{
							"dataset": {
								"referenceName": "Product",
								"type": "DatasetReference"
							},
							"name": "Product"
						},
						{
							"dataset": {
								"referenceName": "SalesExe",
								"type": "DatasetReference"
							},
							"name": "SlesExe"
						},
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable14",
								"type": "DatasetReference"
							},
							"name": "AggregatedData"
						},
						{
							"dataset": {
								"referenceName": "Orderdata",
								"type": "DatasetReference"
							},
							"name": "OrderDataFinal"
						},
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "OrderParque"
						}
					],
					"transformations": [
						{
							"name": "OrderData"
						},
						{
							"name": "TypeCasting"
						},
						{
							"name": "CustCast"
						},
						{
							"name": "OrdersProducts"
						},
						{
							"name": "select1"
						},
						{
							"name": "OrderProdCust"
						},
						{
							"name": "select2"
						},
						{
							"name": "OrderFinal"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "aggregateTotalQuantity"
						},
						{
							"name": "window2"
						},
						{
							"name": "TopProdInEachCategory"
						},
						{
							"name": "DataSplit"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2023",
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2024",
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2025",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          {Product Category} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Product",
						"source(output(",
						"          SalesExecID as string,",
						"          Name as string,",
						"          Age as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SlesExe",
						"source(output(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string,",
						"          Age as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"Order2023, Order2024, Order2025 union(byName: true)~> OrderData",
						"OrderData cast(output(",
						"          OrderDate as date 'yyyy-MM-dd',",
						"          Quantity as integer,",
						"          UnitPrice as float",
						"     ),",
						"     errors: true) ~> TypeCasting",
						"Customer cast(output(",
						"          Age as integer",
						"     ),",
						"     errors: true) ~> CustCast",
						"TypeCasting, Product join(OrderData@ProductID == Product@ProductID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrdersProducts",
						"OrdersProducts select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          CustomerID,",
						"          SalesExecID,",
						"          ProductID = OrderData@ProductID,",
						"          ProductName,",
						"          {Product Category}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, CustCast join(select1@CustomerID == Customer@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProdCust",
						"OrderProdCust select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          SalesExecID,",
						"          ProductID,",
						"          ProductName,",
						"          {Product Category},",
						"          CustomerID = Customer@CustomerID,",
						"          CustomerName,",
						"          Phone,",
						"          City,",
						"          Country,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(CustomerCat = case\r",
						"(\r",
						"    Age<=20,'Young' ,\r",
						" Age>20 && Age<30,'Adult' ,\r",
						" 'Senior'\r",
						" )) ~> OrderFinal",
						"OrderFinal aggregate(groupBy(ProductName),",
						"     TotalOrders = sum(Quantity),",
						"          OrderAmount = sum(Quantity*UnitPrice)) ~> aggregate1",
						"aggregate1 sort(desc(TotalOrders, true)) ~> sort1",
						"OrderFinal aggregate(groupBy({Product Category},",
						"          ProductName),",
						"     TotalQuantity = sum(Quantity)) ~> aggregateTotalQuantity",
						"aggregateTotalQuantity window(over({Product Category}),",
						"     desc(TotalQuantity, true),",
						"     ProdRank = rank()) ~> window2",
						"window2 filter(ProdRank==1) ~> TopProdInEachCategory",
						"OrderFinal split(CustomerCat=='Young',",
						"     CustomerCat=='Adult',",
						"     disjoint: false) ~> DataSplit@(Young, Adult, Senior)",
						"OrderFinal select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          SalesExecID,",
						"          ProductID,",
						"          ProductName,",
						"          Product_Category = {Product Category},",
						"          CustomerID,",
						"          CustomerName,",
						"          Phone,",
						"          City,",
						"          Country,",
						"          Age,",
						"          CustomerCat",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"window2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AggregatedData",
						"OrderFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     partitionFileNames:['OrderDataFinal'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OrderDataFinal",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['Order.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OrderParque"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "Orders"
						},
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataFlowSQLOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JanData"
						},
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          CustomerID as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          TotalAmount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Orders",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as string,",
						"          StockQuantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Products",
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customers",
						"cast1 filter(month(OrderDate)==3) ~> JanData",
						"Orders cast(output(",
						"          OrderDate as date 'yyyy-MM-dd',",
						"          Quantity as integer,",
						"          TotalAmount as double",
						"     ),",
						"     errors: true) ~> cast1",
						"Products cast(output(",
						"          Price as double,",
						"          StockQuantity as integer",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 select(mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          Prod_Cat = Category,",
						"          Price,",
						"          StockQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Customers derive(Phone_Validity = iif(length(Phone)==10,'Valid','Invalid')) ~> derivedColumn1",
						"JanData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/triggerBlob')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Combo_ABC",
							"type": "PipelineReference"
						},
						"parameters": {
							"A": "[parameters('triggerBlob_properties_Combo_ABC_parameters_A')]",
							"B": "[parameters('triggerBlob_properties_Combo_ABC_parameters_B')]",
							"C": "[parameters('triggerBlob_properties_Combo_ABC_parameters_C')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/data/blobs/ABC/",
					"blobPathEndsWith": "Student1.csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('triggerBlob_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "OrderStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Order2023": {},
									"Order2024": {},
									"Order2025": {},
									"Product": {},
									"SlesExe": {},
									"Customer": {},
									"AggregatedData": {},
									"OrderDataFinal": {},
									"OrderParque": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/OrderStatus')]"
			]
		}
	]
}