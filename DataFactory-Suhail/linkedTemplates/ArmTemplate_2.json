{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactory-Suhail"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RestApiPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataApi",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {
											"name": "email"
										}
									},
									{
										"source": {
											"path": "[['first_name']"
										},
										"sink": {
											"name": "first_name"
										}
									},
									{
										"source": {
											"path": "[['last_name']"
										},
										"sink": {
											"name": "last_name"
										}
									},
									{
										"source": {
											"path": "[['avatar']"
										},
										"sink": {
											"name": "avatar"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "DummyApi",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ApiDataFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-29T07:19:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sql_Adls_2025_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_meta_sql",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable12",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_meta_sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_meta_sql').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@item().Source_Query",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable13",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().LandingSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().LandingTable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText4",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": {
													"value": "@item().Adls_Location",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(replace(item().FileName, '.csv', '_2025.csv'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Year": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-28T11:42:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Order2023",
								"type": "DatasetReference"
							},
							"name": "Order2023"
						},
						{
							"dataset": {
								"referenceName": "Order2024",
								"type": "DatasetReference"
							},
							"name": "Order2024"
						},
						{
							"dataset": {
								"referenceName": "Order2025",
								"type": "DatasetReference"
							},
							"name": "Order2025"
						},
						{
							"dataset": {
								"referenceName": "Product",
								"type": "DatasetReference"
							},
							"name": "Product"
						},
						{
							"dataset": {
								"referenceName": "SalesExe",
								"type": "DatasetReference"
							},
							"name": "SlesExe"
						},
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataFlowSQLOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "OrderData"
						},
						{
							"name": "TypeCasting"
						},
						{
							"name": "CustCast"
						},
						{
							"name": "OrdersProducts"
						},
						{
							"name": "select1"
						},
						{
							"name": "OrderProdCust"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "window1"
						},
						{
							"name": "aggregateTotalQuantity"
						},
						{
							"name": "window2"
						},
						{
							"name": "TopProdInEachCategory"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2023",
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2024",
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          UnitPrice as string,",
						"          CustomerID as string,",
						"          SalesExecID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Order2025",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          {Product Category} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Product",
						"source(output(",
						"          SalesExecID as string,",
						"          Name as string,",
						"          Age as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SlesExe",
						"source(output(",
						"          CustomerID as string,",
						"          CustomerName as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string,",
						"          Age as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"Order2023, Order2024, Order2025 union(byName: true)~> OrderData",
						"OrderData cast(output(",
						"          OrderDate as date 'yyyy-MM-dd',",
						"          Quantity as integer,",
						"          UnitPrice as float",
						"     ),",
						"     errors: true) ~> TypeCasting",
						"Customer cast(output(",
						"          Age as integer",
						"     ),",
						"     errors: true) ~> CustCast",
						"TypeCasting, Product join(OrderData@ProductID == Product@ProductID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrdersProducts",
						"OrdersProducts select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          CustomerID,",
						"          SalesExecID,",
						"          ProductID = OrderData@ProductID,",
						"          ProductName,",
						"          {Product Category}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, CustCast join(select1@CustomerID == Customer@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> OrderProdCust",
						"OrderProdCust select(mapColumn(",
						"          OrderID,",
						"          OrderDate,",
						"          Quantity,",
						"          UnitPrice,",
						"          SalesExecID,",
						"          ProductID,",
						"          ProductName,",
						"          {Product Category},",
						"          CustomerID = Customer@CustomerID,",
						"          CustomerName,",
						"          Phone,",
						"          City,",
						"          Country,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(CustomerCat = case\r",
						"(\r",
						"    Age<=20,'Young' ,\r",
						" Age>20 && Age<30,'Adult' ,\r",
						" 'Senior'\r",
						" )) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(ProductName),",
						"     TotalOrders = sum(Quantity),",
						"          OrderAmount = sum(Quantity*UnitPrice)) ~> aggregate1",
						"aggregate1 sort(desc(TotalOrders, true)) ~> sort1",
						"derivedColumn1 window(over({Product Category}),",
						"     desc(Quantity, true),",
						"     ProdRank = rank()) ~> window1",
						"derivedColumn1 aggregate(groupBy({Product Category},",
						"          ProductName),",
						"     TotalQuantity = sum(Quantity)) ~> aggregateTotalQuantity",
						"aggregateTotalQuantity window(over({Product Category}),",
						"     desc(TotalQuantity, true),",
						"     ProdRank = rank()) ~> window2",
						"window2 filter(ProdRank==1) ~> TopProdInEachCategory",
						"aggregateTotalQuantity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Orders",
								"type": "DatasetReference"
							},
							"name": "Orders"
						},
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataFlowSQLOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "JanData"
						},
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          OrderID as string,",
						"          OrderDate as string,",
						"          CustomerID as string,",
						"          ProductID as string,",
						"          Quantity as string,",
						"          TotalAmount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Orders",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as string,",
						"          StockQuantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Products",
						"source(output(",
						"          CustomerID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Email as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customers",
						"cast1 filter(month(OrderDate)==3) ~> JanData",
						"Orders cast(output(",
						"          OrderDate as date 'yyyy-MM-dd',",
						"          Quantity as integer,",
						"          TotalAmount as double",
						"     ),",
						"     errors: true) ~> cast1",
						"Products cast(output(",
						"          Price as double,",
						"          StockQuantity as integer",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 select(mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          Prod_Cat = Category,",
						"          Price,",
						"          StockQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Customers derive(Phone_Validity = iif(length(Phone)==10,'Valid','Invalid')) ~> derivedColumn1",
						"JanData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}